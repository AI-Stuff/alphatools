// Lark grammar for "expression"-based alphas

?value: "(" value ")"
      | abs
      | log
      | sign
      | greaterthan
      | lessthan
      | equals
      | logicalor
      | ternary
      | scale
      | signedpower
      | linear_decay
      | ts_max
      | ts_min
      | ts_argmax
      | ts_argmin
      | ts_rank
      | stddev
      | close
      | opens
      | high
      | low
      | volume
      | returns
      | adv
      | vwap
      | delay
      | correlation
      | covariance
      | delta
      | div
      | mult
      | minus
      | plus
      | neg
      | rank
      | sum
      | product
      | number
      | SIGNED_NUMBER     -> number
      | ESCAPED_STRING

delay: "delay" "(" value "," SIGNED_NUMBER ")"
delta: "delta" "(" value "," SIGNED_NUMBER ")"

correlation: "correlation" "(" value "," value "," SIGNED_NUMBER ")"
covariance: "covariance" "(" value "," value "," SIGNED_NUMBER ")"

close: "close"
opens: "opens"
high: "high"
low: "low"
volume: "volume"
returns: "returns"
vwap: "vwap"
adv: "adv" SIGNED_NUMBER

number: SIGNED_NUMBER

ts_max: ("ts_max"|"max") "(" value "," SIGNED_NUMBER ")"
ts_min: ("ts_min"|"min") "(" value "," SIGNED_NUMBER ")"
ts_argmax: "ts_argmax" "(" value "," SIGNED_NUMBER ")"
ts_argmin: "ts_argmin" "(" value "," SIGNED_NUMBER ")"
ts_rank: "ts_rank" "(" value "," SIGNED_NUMBER ")"
stddev: "stddev" "(" value "," SIGNED_NUMBER ")"

div: value "/" value
minus: value "-" value
plus: value "+" value
mult: value "*" value

abs: "abs" "(" value ")"
log: "log" "(" value ")"
sign: "sign" "(" value ")"
greaterthan: value ">" value
lessthan: value "<" value
equals: value "==" value
logicalor: value "||" value
ternary: value "?" value ":" value
scale: "scale" "(" value ")"
signedpower: "signedpower" "(" value ", " value ")"
linear_decay: "linear_decay" "(" value ", " SIGNED_NUMBER ")"

neg: "-" value
rank: "rank" "(" value ")"
sum: "sum" "(" value "," SIGNED_NUMBER ")"
product: "product" "(" value "," SIGNED_NUMBER ")"

%import common.SIGNED_NUMBER
%import common.ESCAPED_STRING
%import common.WS
%ignore WS